services:

  web:
    container_name: ttrss-web
    image: cthulhoo/ttrss-web-nginx:latest
    restart: unless-stopped
    environment:
      - APP_UPSTREAM=ttrss-app
      - APP_WEB_ROOT=/var/www/html/tt-rss
      - APP_BASE=
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - app:/var/www/html:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - ttrss
      # - traefik
    ports:
      - 80:80
    healthcheck:
      test: ["CMD-SHELL", "curl -ILfSs http://localhost$$APP_BASE/index.php"]
      interval: 10s
    # labels:
    #   traefik.enable: true
    #   traefik.http.routers.ttrss.entrypoints: https
    #   traefik.http.routers.ttrss.rule: Host(`ttrss.example.com`) # Mandatory
    #   traefik.http.routers.ttrss.tls: true
    #   traefik.http.routers.ttrss.service: ttrss
    #   traefik.http.services.ttrss.loadbalancer.server.scheme: http
    #   traefik.http.services.ttrss.loadbalancer.server.port: 80

  app:
    container_name: ttrss-app
    build: app
    image: ttrss-app
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - OWNER_UID=500
      - OWNER_GID=500
      - TTRSS_DB_HOST=ttrss-db
      - TTRSS_DB_NAME=postgres
      - TTRSS_DB_USER=postgres
      - TTRSS_DB_PASS=${POSTGRES_PASSWORD}
      - TTRSS_SELF_URL_PATH=http://ttrss.example.com # Mandatory
      - TTRSS_PLUGINS=auth_ldap, auth_internal, mailer_smtp, note, nginx_xaccel
      - TTRSS_SMTP_FROM_NAME=Tiny Tiny RSS
      - TTRSS_SMTP_FROM_ADDRESS=ttrss@example.com # Mandatory
      - TTRSS_SMTP_SERVER=mail.example.com:587 # Mandatory
      - TTRSS_SMTP_LOGIN=postmaster@example.com # Mandatory
      - TTRSS_SMTP_PASSWORD=${SMTP_PASSWORD}
      - TTRSS_SMTP_SECURE=tls
      - TTRSS_SMTP_SKIP_CERT_CHECKS=false
      - TTRSS_LDAP_URI=ldap://dc.some.example.com # Mandatory
      - TTRSS_LDAP_TLS=true
      - TTRSS_LDAP_BIND_DN=SOME\%login # Mandatory
      - TTRSS_LDAP_BIND_PW=%password
      - TTRSS_LDAP_BASE_DN=CN=Users,DC=some,DC=example,DC=com # Mandatory
      - TTRSS_LDAP_ADMIN_FILTER=(&(objectClass=person)(memberOf:1.2.840.113556.1.4.1941:=CN=TinyTinyRSS-Admins,CN=Users,DC=some,DC=example,DC=com)(sAMAccountName=%login))
      - TTRSS_LDAP_USER_FILTER=(&(objectClass=person)(memberOf:1.2.840.113556.1.4.1941:=CN=TinyTinyRSS-Users,CN=Users,DC=some,DC=example,DC=com)(sAMAccountName=%login))
      - TTRSS_LDAP_USER_ATTRIBUTE=sAMAccountName
      - TTRSS_LDAP_NAME_ATTRIBUTE=name
      - TTRSS_LDAP_MAIL_ATTRIBUTE=mail
      - ADMIN_USER_PASS=${ADMIN_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - app:/var/www/html
    networks:
      - ttrss

  updater:
    container_name: ttrss-updater
    image: cthulhoo/ttrss-fpm-pgsql-static:latest
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - OWNER_UID=500
      - OWNER_GID=500
      - TTRSS_DB_HOST=ttrss-db
      - TTRSS_DB_NAME=postgres
      - TTRSS_DB_USER=postgres
      - TTRSS_DB_PASS=${POSTGRES_PASSWORD}
      - TTRSS_DAEMON_MAX_JOBS=10
      - TTRSS_DAEMON_SLEEP_INTERVAL=3600
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - app:/var/www/html
    networks:
      - ttrss
    command: /opt/tt-rss/updater.sh
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep update_daemon2.php"]
      interval: 10s

  db:
    container_name: ttrss-db
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - db:/var/lib/postgresql/data
    networks:
      - ttrss
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s

  backup:
    container_name: ttrss-backup
    image: postgres:15-alpine
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - ARCHIVE
    volumes:
      - ./backup:/backup
    networks:
      - ttrss
    entrypoint: /bin/bash
    command:
      - -c
      - |
        [ -z "$$ARCHIVE" ] && { echo ERROR: Archive name is missing; exit 1; }
        [ -e "/backup/$$ARCHIVE" ] && { echo ERROR: Archive file exists; exit 1; }
        echo Backing up to $$ARCHIVE
        mkdir -p /volumes
        pg_dump --verbose --host=db --username=postgres --clean --create postgres --file=/volumes/ttrss-db.sql
        tar -caf "/backup/$$ARCHIVE" -C /volumes ./
    profiles:
     - tools
     
  restore:
    container_name: ttrss-restore
    image: postgres:15-alpine
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - ARCHIVE
    volumes:
      - ./backup:/backup
    networks:
      - ttrss
    entrypoint: /bin/bash
    command:
      - -c
      - |
        [ -z "$$ARCHIVE" ] && { echo ERROR: Archive name is missing; exit 1; }
        [ -e "/backup/$$ARCHIVE" ] || { echo ERROR: Archive file does not exist; exit 1; }
        read -p "Are you sure? " -n 1 -r; echo
        if [[ $$REPLY =~ ^[Yy]$ ]]; then
          echo Restoring from archive $$ARCHIVE
          mkdir -p /volumes
          for volume in $$(ls -d /volumes/*/ 2> /dev/null); do rm -rf $$volume{,.[!.]}*; done
          tar -C /volumes -xaf "/backup/$$ARCHIVE"
          psql --host=db --username=postgres --dbname=template1 --file=/volumes/ttrss-db.sql
        fi
    profiles:
     - tools

volumes:
  app:
  db:

networks:
  ttrss:
    name: ttrss
  # traefik:
  #   external: true